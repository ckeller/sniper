kind instance type.
type var_context      int -> instance. 
type concrete_type    term -> instance.
type applied_type list instance -> instance. 

pred coqnat_to_int i: term, o: int.
    coqnat_to_int (app [{{ S }}, L]) N :-  coqnat_to_int L N1, N is N1 + 1.
    coqnat_to_int X 0 :- coq.unify-eq X {{O}} ok.

pred int_to_coqnat i: int, o: term.
    int_to_coqnat 0 X :- !, coq.unify-eq X {{0}} ok.
    int_to_coqnat N (app [{{ S }}, X]) :- int_to_coqnat N1 X, N is N1 + 1.


pred instance_to_term i: goal-ctx, i: instance, o: term.
    instance_to_term Ctx (var_context N) X :- nth N Ctx (decl X _ _).
    instance_to_term Ctx (var_context N) X :- nth N Ctx (def X _ _ _).
    instance_to_term Ctx (applied_type L) (app X) :- std.map L (instance_to_term Ctx) X.
    instance_to_term _ (concrete_type T) T.

pred subst_in_instances_aux i: goal-ctx, i: list instance, o: list term.
    subst_in_instances_aux Ctx [(concrete_type T)|XS] [T| XS'] :- subst_in_instances_aux Ctx XS XS'.
    subst_in_instances_aux Ctx [(var_context N)| XS] [X|XS'] :- subst_in_instances_aux Ctx XS XS', nth N Ctx (decl X _ _).
    subst_in_instances_aux Ctx [(applied_type L)| XS] [app L'|XS'] :- std.map L (instance_to_term Ctx) L',
        subst_in_instances_aux Ctx XS XS'. 
    subst_in_instances_aux _Ctx [] []. 

pred subst_in_instances i: goal-ctx, i:(list (pair term (list instance))), o: list (pair term (list term)).
    subst_in_instances Ctx L1 L2 :-  std.unzip L1 LT LI, std.map LI (subst_in_instances_aux Ctx) L2', std.zip LT L2' L2.

pred type_global i: term, o: term.
  type_global (global (indt I)) Ty :- coq.env.indt I _ _ _ Ty _ _.
  type_global (global (indc C)) Ty :- coq.env.indc C _ _ _ Ty.

pred ctx_to_tys i: goal-ctx, o: list term.
    ctx_to_tys [(decl _ _ Ty)|XS] [Ty|R] :- ctx_to_tys XS R.
    ctx_to_tys [(def _ _ _ Bo)|XS] [Bo|R] :- ctx_to_tys XS R.
    ctx_to_tys [] [].

pred ctx_to_trms i: goal-ctx, o: list term.     
    ctx_to_trms [(decl X _ _)|XS] [X|R] :- ctx_to_trms XS R.
    ctx_to_trms [(def X _ _ _)|XS] [X|R] :- ctx_to_trms XS R.
    ctx_to_trms [] [].

pred ctx_to_hyps i: goal-ctx, o: list term.
    ctx_to_hyps [(decl _ _ Ty)|XS] [Ty|R] :- coq.typecheck Ty {{ Prop }} ok, ctx_to_hyps XS R.
    ctx_to_hyps [_|XS] R :- ctx_to_hyps XS R.
    ctx_to_hyps [] [].    

pred codomain i:term, o:term.
  codomain (prod Na Ty F) R :- !, pi x\ decl x Na Ty => codomain (F x) R. 
  codomain T T.

pred is_not_prop i: term, o: diagnostic.
  is_not_prop T ok :- not (coq.unify-leq T {{Prop}} ok).

pred codomain_not_prop i: term, o: diagnostic.
  codomain_not_prop (prod Na Ty F) D :- !, pi x\ decl x Na Ty => codomain_not_prop (F x) D.
  codomain_not_prop T ok :- !, is_not_prop T ok.

pred get_number_of_parameters i: term, o: int.
    get_number_of_parameters (global (indt I)) NB :- coq.env.indt I _ NB _ _ _ _.
    get_number_of_parameters (global (indc C)) NB :- coq.env.indc C NB _ _ _.
    get_number_of_parameters _ 0.

pred tuple_to_list i: term, o: (list term).
    tuple_to_list {{ pair lp:P1 lp:P2 }} R :- !, tuple_to_list P1 R1, tuple_to_list P2 R2,
        std.append R1 R2 R.
    tuple_to_list T [T].

pred singl_tuple_to_list i: (list argument), o: (list term).
    singl_tuple_to_list [trm T] R :- tuple_to_list T R.
    singl_tuple_to_list [] [].

pred add_if_polymorphic i: term, i: (list term), o: (list term).
    add_if_polymorphic ((prod _Na Ty _Bod) as T) L [T | L] :- coq.unify-eq Ty {{ Type }} ok.
    add_if_polymorphic _ L L.

pred is_polymorphic i: pair term term.
    is_polymorphic (pr _ (prod _Na Ty _F)) :- coq.unify-eq Ty {{ Type }} ok.

pred polymorphic_hypotheses i: (list (pair term term)), o: (list (pair term term)).
    polymorphic_hypotheses L R :- std.filter L is_polymorphic R.

pred ugly_hack_on_pairs i: goal-ctx, i: (pair term term), o: (pair term term).
    ugly_hack_on_pairs Ctx (pr T1 T2) (pr T1 T2') :- trm_with_ugly_hack T2 Ctx T2'. 

pred collect_hypotheses_from_context i: goal-ctx, o: list term, o: list (pair term term).
    collect_hypotheses_from_context [(decl X _ Ty)| XS] [Ty|R] [pr X Ty|R'] :- !, collect_hypotheses_from_context XS R R'.
    collect_hypotheses_from_context [def _ _ _ _ | XS] R R' :- !, collect_hypotheses_from_context XS R R'.
    collect_hypotheses_from_context [] [] [].

pred find_pos_in_context_aux i: goal-ctx, i: term, i: int, o: instance.
    find_pos_in_context_aux [(decl T' _ _)| _XS] T N (var_context N) :- coq.unify-eq T' T ok. 
    find_pos_in_context_aux [(decl _T' _ _)| XS] T N R :- !, M is N + 1, find_pos_in_context_aux XS T M R.
    find_pos_in_context_aux [(def T' _ _ _) | _XS] T N (var_context N) :- coq.unify-eq T' T ok. 
    find_pos_in_context_aux [(def _T' _ _ _)| XS] T N R :- !, M is N + 1, find_pos_in_context_aux XS T M R.
    find_pos_in_context_aux [] T _ (concrete_type T).

pred find_pos_in_context i: goal-ctx, i: term, o: instance.
    find_pos_in_context Ctx (app [U|L]) (applied_type [Inst|L1]) :- !,
        std.map L (x\ find_pos_in_context_aux Ctx x 0) L1, find_pos_in_context_aux Ctx U 0 Inst.
    find_pos_in_context Ctx T Inst :- find_pos_in_context_aux Ctx T 0 Inst.

pred trm_with_ugly_hack i: term, i: goal-ctx, o: term.
    trm_with_ugly_hack X Ctx (app [{{ugly_hack}}, M]) :- name X, find_pos_in_context Ctx X (var_context N), !, int_to_coqnat N M.
    trm_with_ugly_hack (prod Na Ty F) Ctx (prod Na Ty F') :- pi x\ decl x Na Ty => trm_with_ugly_hack (F x) Ctx (F' x).
    trm_with_ugly_hack (app L) Ctx (app M) :- std.map L (x\ trm_with_ugly_hack x Ctx) M.
    trm_with_ugly_hack X _ X.

pred remove_ugly_hack i: term, i: goal-ctx, o: term.
    remove_ugly_hack (app [{{ugly_hack}}, N]) Ctx X :- !, coqnat_to_int N M, (nth M Ctx (decl X _ _); nth M Ctx (def X _ _ _)).
    remove_ugly_hack (prod Na Ty F) Ctx (prod Na Ty F') :- pi x\ decl x Na Ty => remove_ugly_hack (F x) Ctx (F' x).
    remove_ugly_hack (app L) Ctx (app M) :- std.map L (x\ remove_ugly_hack x Ctx) M.
    remove_ugly_hack X _ X.

pred append_nodup i: list A, i: list A, o: list A.
    append_nodup [X|XS] Y R :- append_nodup XS Y R, std.mem! R X.
    append_nodup [X|XS] Y [X|R] :- !, append_nodup XS Y R.
    append_nodup [] Y Y.

pred find_occurences_aux i: list A, i: A, i: int, o: list int.
    find_occurences_aux [X|XS] X N [N|R] :- !,  M is N + 1, find_occurences_aux XS X M R.
    find_occurences_aux [_Y |XS] X N R :- M is N + 1, find_occurences_aux XS X M R.
    find_occurences_aux [] _X _N [].

pred find_occurences i: list A, i: A, o: list int.
    find_occurences L X R :- find_occurences_aux L X 0 R. 

pred filter_key i: A, i: list (pair A B), o: list B. %takes all the corresponding values for a given key in a list of pairs
    filter_key X [pr X Y | XS] [Y|R] :- !, filter_key X XS R.
    filter_key X [_Y | XS] R :- filter_key X XS R.
    filter_key _X [] []. 

pred nth i:int, i:list A, o:A. % a version of nth with no fatal error to handle backtracking
    nth 0 [X|_ ] R :- !, X = R.
    nth N [_|XS] R :- N > 0, !, N1 is N - 1, nth N1 XS R.

pred argument_to_term i: list argument, o: list (pair term term).
    argument_to_term [trm T| XS] [pr T Ty|R] :- !, coq.typecheck T Ty ok, argument_to_term XS R.
    argument_to_term [] [].

pred term_to_argument i: list term, o: list argument.
    term_to_argument [T| XS] [trm T|R] :- !, term_to_argument XS R.
    term_to_argument [] [].