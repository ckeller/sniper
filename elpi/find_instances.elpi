kind instance type.
type var_context      int -> instance. 
type concrete_type    term -> instance.

pred find_instantiated_params i: goal-ctx, i: term, o: (list (pair term (list instance))).
    find_instantiated_params Ctx (fun N Ty F) L :- !, find_instantiated_params Ctx Ty R1,
        pi x\ decl x N Ty => find_instantiated_params Ctx (F x) R2, append_nodup R1 R2 L.
    find_instantiated_params Ctx (prod N Ty F) L :- not (coq.unify-leq Ty {{Type}} ok), !, find_instantiated_params Ctx Ty R1,
        pi x\ decl x N Ty => find_instantiated_params Ctx (F x) R2, append_nodup  R1 R2 L.
    find_instantiated_params Ctx (let N Ty V F) R :- !, find_instantiated_params Ctx Ty R1,
        pi x\ def x N Ty V => find_instantiated_params Ctx (F x) R2, append_nodup R1 R2 R.
    find_instantiated_params Ctx (match T _U L) R :- !, find_instantiated_params Ctx T R1, 
        std.map L (find_instantiated_params Ctx) R2,
        std.flatten R2 R3,
        append_nodup  R1 R3 R.
    find_instantiated_params Ctx (fix Na _ Ty F) R :- !, find_instantiated_params Ctx Ty R1,
        pi x\ decl x Na Ty => find_instantiated_params Ctx (F x) R2,
        append_nodup R1 R2 R.
    find_instantiated_params Ctx (app [Hd |X]) [(pr Hd R)] :- coq.term->gref Hd G,
        coq.env.typeof G Ty, codomain_not_prop Ty ok,
    get_number_of_parameters (global G) NB, NB > 0, !,
        std.take NB X R0, std.map R0 (find_pos_in_context Ctx) R.
    find_instantiated_params Ctx (app L) R :- !, std.map L (find_instantiated_params Ctx) R1, std.flatten R1 R.
    find_instantiated_params _ _ [].

pred find_instantiated_params_in_list i: goal-ctx, i: (list term), o: (list (pair term (list instance))).
    find_instantiated_params_in_list Ctx [X | XS] L :- !, find_instantiated_params Ctx X R1, 
        find_instantiated_params_in_list Ctx XS R2, append_nodup R1 R2 L.
    find_instantiated_params_in_list _Ctx [] [].


pred subst_in_instances_aux i: goal-ctx, i: list instance, o: list term.
    subst_in_instances_aux Ctx [(concrete_type T)|XS] [T| XS'] :- subst_in_instances_aux Ctx XS XS'.
    subst_in_instances_aux Ctx [(var_context N)| XS] [X|XS'] :- subst_in_instances_aux Ctx XS XS', nth N Ctx (decl X _ _).
    subst_in_instances_aux _Ctx [] []. 

pred subst_in_instances i: goal-ctx, i:(list (pair term (list instance))), o: list (pair term (list term)).
    subst_in_instances Ctx L1 L2 :-  std.unzip L1 LT LI, std.map LI (subst_in_instances_aux Ctx) L2', std.zip LT L2' L2.
